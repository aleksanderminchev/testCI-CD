from models.balance import Balance
from datetime import datetime
from flask import request, Blueprint, abort, send_file
from apifairy import authenticate, body, response
from api.decorators import paginated_response, query_params
from api.utils.utils import get_date
from api.utils.accounting import calculate_balances, export_data_to_excel, \
    send_excel_file_accounting, calculate_revenue_generated
from api.auth import admin_auth, token_auth
from models.customer import Customer
from models.transaction import Transaction
from api.schema.balances import RecalculateBalanceSchema, BalanceSchema, \
    UseLessonSchema, AccountingBalanceSchema, \
    AddOrderToBalanceSchema, AddTransactionToBalanceSchema,\
    RevenueAccountingSchema

balances = Blueprint('balances', __name__)


@balances.route('/get_balance/<int:customer_id>', methods=['GET'])
@authenticate(admin_auth)
@response(BalanceSchema())
def get_balance(customer_id):
    """ Get balance of a specific customer by their customer ID. """
    balance = Balance.query.filter_by(customer_id=customer_id).first()
    return balance.to_dict()


@balances.route('/balance/<int:id>', methods=['GET'])
@authenticate(token_auth)
@response(BalanceSchema())
def balance(id):
    """ Get balance by ID. """
    balance = Balance.query.get(id) or abort(404)
    return balance.to_dict()


@balances.route('/balance', methods=['GET'])
@authenticate(admin_auth)
@paginated_response(schema=BalanceSchema(many=True))
def all():
    """Retrieve all balances"""
    return Balance.query


@balances.route('/create_balance', methods=['POST'])
@authenticate(admin_auth)
@body(BalanceSchema())
@response(BalanceSchema(), 201)
def create_balance(args):
    """Create a new balance
    Creates a new balance for a new customer/user account
    """
    balance = Balance.create_balance(**args)
    return balance.to_dict()


@balances.route('/add_order_to_balance', methods=['POST'])
# @authenticate(admin_auth)
@response(BalanceSchema(), 201)
@body(AddOrderToBalanceSchema())
def add_order(args):
    """Add a newly created order to the balance of the customer
    """
    balance = Balance.add_order(**args)
    return balance.to_dict()


@balances.route('/remove_order_from_balance', methods=['POST'])
@authenticate(admin_auth)
@response(BalanceSchema(), 201)
@body(AddOrderToBalanceSchema())
def remove_order(args):
    """Removes an order from the balance of the customer
    """
    balance = Balance.remove_order(**args)
    return balance.to_dict()


@balances.route('/add_transaction_to_balance', methods=['POST'])
@authenticate(admin_auth)
@response(BalanceSchema(), 201)
@body(AddTransactionToBalanceSchema())
def add_transaction(args):
    """Add a newly created transaction to the balance of the customer
    """
    transaction = Transaction.get_transaction_by_id(args['transaction_id'])
    customer = Customer.get_customer_by_id(args['customer_id'])
    balance = Balance.add_transaction(transaction, customer.balance[0])
    return balance.to_dict()


@balances.route('/remove_transaction_from_balance', methods=['POST'])
@authenticate(admin_auth)
@response(BalanceSchema(), 201)
@body(AddTransactionToBalanceSchema())
def remove_transaction(args):
    """Removes an transaction from the balance of the customer
    """
    balance = Balance.remove_transaction(**args)
    return balance.to_dict()


@balances.route('/void_payment', methods=['POST'])
@authenticate(admin_auth)
@response(BalanceSchema(), 201)
@body(AddTransactionToBalanceSchema())
def void_payment(args):
    """Voids a payment made by the customer
    """
    balance = Balance.void_payment_transaction(**args)
    return balance.to_dict()


@balances.route('/unvoid_payment', methods=['POST'])
@authenticate(admin_auth)
@response(BalanceSchema(), 201)
@body(AddTransactionToBalanceSchema())
def unvoid_payment(args):
    """Unvoids a payment made by the customer
    """
    balance = Balance.unvoid_payment_transaction(**args)
    return balance.to_dict()


@balances.route('/accounting', methods=['GET'])
@query_params(AccountingBalanceSchema(many=True), AccountingBalanceSchema)
def accounting(args):
    """Calculates the individual balances of the customers
    The date has to be in format YYYY-mm-dd
    """
    date = get_date()
    if 'date' in args.keys():
        date = datetime.combine(date.date(), datetime.max.time())
    data = calculate_balances(date)
    file_name = export_data_to_excel(data, date)
    send_excel_file_accounting(file_name)
    return data


@balances.route('/calculate_revenue_generated', methods=['GET'])
@query_params(RevenueAccountingSchema(many=True), RevenueAccountingSchema)
def calculate_revenue_gen(args):
    """Calculates the revenue generated by the customers
    between 2 dates
    The dates have to be in format YYYY-mm-dd
    """
    end_date = get_date()
    start_date = get_date()
    if 'start_date' in args.keys() and 'end_date' in args.keys():
        start_date = datetime.combine(args['start_date'], datetime.max.time())
        end_date = datetime.combine(args['end_date'], datetime.max.time())
    print(start_date, end_date)
    data = calculate_revenue_generated(start_date, end_date)
    return data


@balances.route('/download_excell_file', methods=['POST'])
def download_excell_file():
    """Returns the excell file of the calculated
    balances then deletes it from the server
    """
    try:
        date = request.json['date']
        return send_excel_file_accounting(f'Accounting_{date}.xlsx')
    finally:
        print('finally')
        # delete the file here


@balances.route('/recalculate_balance', methods=['POST'])
@authenticate(admin_auth)
@response(BalanceSchema(), 201)
@body(RecalculateBalanceSchema())
def recalculate_balance(args):
    """ Recalculates the balance 
    gets all of the lessons and recalculates the balance
    for right now does it only for the lessons, payments and orders can be added
    """
    from models.lesson import Lesson
    lesson = Lesson.get_lesson_by_id(args['lesson_id'])
    balance = Balance.recalculate_lesson_hours_on_error(lesson)
    return balance.to_dict()


@balances.route('/use_lesson', methods=['POST'])
@authenticate(admin_auth)
@response(BalanceSchema(), 201)
@body(UseLessonSchema())
def use_lesson(args):
    """ Takes a used lesson and adds its hours to hours_used in the balance"""
    customer = Balance.use_lesson(**args)
    return customer.balance[0].to_dict()


@balances.route('/schedule_lesson', methods=['POST'])
@authenticate(admin_auth)
@response(BalanceSchema(), 201)
@body(UseLessonSchema)
def schedule_lesson(args):
    """Takes a scheduled lesson and add its hours to hours_scheduled in the balance"""
    customer = Balance.schedule_lesson(**args)
    return customer.balance[0].to_dict()
